#!/usr/bin/python3
import sys
import os
import argparse

PROJECT_PATH = os.path.dirname(os.getcwd())

# This class is for print colors on terminal.
class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def argumentParser():
    parser = argparse.ArgumentParser()
    helpRegionCode = 'Region code for the youtube videos, by default ALL.\nPossible regions:\nCA: Canada,\nDE: Alemania,\n\tFR: Francia,\n\tGB: Reino Unido,\n\tIN: India,\n\tJP: Japon,\n\tKR: Korea,\n\tMX: Mexico,\n\tRU: Rusia,\n\tUS: Estados Unidos'
    parser.add_argument("regionCode", help=helpRegionCode)
    return parser.parse_args()

def createMenuOptions():
    options = dict()
    options['1'] = "Media de visitas por mes." 
    options['2'] = "Media de visitas por año."
    options['3'] = "Categoria con mas videos."
    options['4'] = "Top 10 de videos mas vistos." 
    options['5'] = "Dia de la semana con mas visitas."
    options['6'] = "Videos con mayor cantidad de likes."
    options['7'] = "Videos con mayor cantidad de comentarios."
    options['8'] = "Gráfica de categorias por pais."
    options['9'] = "Gráfica de categorias mundial." 
    options['10'] = "Cuadro de categorias por país."
    options['11'] = "Cuadro de categorias mundial."
    options['0'] = "Exit"
    return options

def createMenuActions():
    actions = dict()
    actions['1'] = averageVisitsPerMonth
    actions['2'] = averageVisitsPerYear
    actions['3'] = categoryWithMoreVideos
    actions['4'] = top10VideosWithMore
    actions['5'] = weekdayWithMoreVisits
    actions['6'] = videosWithMoreLikes
    actions['7'] = videosWithMoreComments
    actions['8'] = categoryGraphByCountry
    actions['9'] = categoryGraphWorldwide
    actions['10'] = showCategoriesByCountry
    actions['11'] = showCategoriesWorldwide
    actions['0'] = exitProgram
    return actions

def averageVisitsPerMonth():
    path = os.path.join(PROJECT_PATH,"scripts","globalStadistics.py")
    cmd = "spark-submit \"{PATH}\" MONTH".format(PATH=path)
    print(cmd)
    os.system(cmd)
    pass

def averageVisitsPerYear():
    path = os.path.join(PROJECT_PATH,"scripts","globalStadistics.py")
    cmd = "spark-submit \"{PATH}\" YEAR".format(PATH=path)
    os.system(cmd)
    pass

def categoryWithMoreVideos():
    path = os.path.join(PROJECT_PATH,"scripts","globalStadistics.py")
    cmd = "spark-submit \"{PATH}\" CATEGORY".format(PATH=path)
    os.system(cmd)
    pass

def top10VideosWithMore():
    path = os.path.join(PROJECT_PATH,"scripts","processStreamData.py")
    cmd = "spark-submit \"{PATH}\" most_view".format(PATH=path)
    os.system(cmd)
    pass

def weekdayWithMoreVisits():
    path = os.path.join(PROJECT_PATH,"scripts","processStreamData.py")
    cmd = "spark-submit \"{PATH}\" best_day_of_week".format(PATH=path)
    os.system(cmd)
    pass

def videosWithMoreLikes():
    path = os.path.join(PROJECT_PATH,"scripts","processStreamData.py")
    cmd = "spark-submit \"{PATH}\" MOST_LIKED".format(PATH=path)
    os.system(cmd)
    pass

def videosWithMoreComments():
    path = os.path.join(PROJECT_PATH,"scripts","processStreamData.py")
    cmd = "spark-submit \"{PATH}\" MOST_COMMENTED".format(PATH=path)
    os.system(cmd)
    pass

def categoryGraphByCountry():
    pais = str(input("Indique el codigo del país: "))
    os.system("python3 liveData.py {COUNTRY}".format(COUNTRY=pais))
    path = os.path.join(PROJECT_PATH,"scripts","topCategories.py")
    cmd = "spark-submit \"{PATH}\" -m graph {COUNTRY}".format(PATH=path,COUNTRY=pais)
    os.system(cmd)
    pass

def categoryGraphWorldwide():
    path = os.path.join(PROJECT_PATH,"scripts","topCategories.py")
    cmd = "spark-submit \"{PATH}\" -m graph ALL".format(PATH=path)
    os.system(cmd)
    pass

def showCategoriesByCountry():
    pais = str(input("Indique el codigo del país: "))
    os.system("python3 liveData.py {COUNTRY}".format(COUNTRY=pais))
    path = os.path.join(PROJECT_PATH,"scripts","topCategories.py")
    cmd = "spark-submit \"{PATH}\" -m console {COUNTRY}".format(PATH=path,COUNTRY=pais)
    os.system(cmd)
    pass

def showCategoriesWorldwide():
    path = os.path.join(PROJECT_PATH,"scripts","topCategories.py")
    cmd = "spark-submit \"{PATH}\" -m console ALL".format(PATH=path)
    os.system(cmd)
    pass

def generateMLModel():
    pass

def sendToMLModel():
    pass

def exitProgram():
    exitText = """Thanks for using our program.

    Authors:
    \t- Daniel Candil Vizcaino
    \t- Frederick Ernesto Borges Noronha
    \t- Guillermo Sánchez-Mariscal González
    """
    print(exitText)
    sys.exit(0)
    pass

def executeMenuOption(option):
    actions = createMenuActions()
    function = actions[option]
    function()
    pass

def menu(options):
    # Print options
    for code, value in options.items(): 
        print(code, value)
    
    # Ask for an option
    option = input("select option: ")

    # Verify if its a valid option and execute it
    if option in options.keys():
        executeMenuOption(option)
    else:
        print(bcolors.FAIL + "Invalid option" + bcolors.ENDC)

    return True

if __name__ == "__main__":
    args = argumentParser()
    os.system("python3 liveData.py {COUNTRY}".format(COUNTRY=args.regionCode.upper()))
    options = createMenuOptions()
    while (menu(options)):pass